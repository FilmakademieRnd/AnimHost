#include "GNNController.h"
#include <FileHandler.h>
#include <glm/gtx/quaternion.hpp>
#include <glm/ext/quaternion_float.hpp>
#include "DummyData.h"
#include <animhosthelper.h>

#include <glm/gtx/matrix_decompose.hpp>
#include <glm/gtx/vector_angle.hpp>

GNNController::GNNController()
{
	network = std::make_unique<OnnxModel>();
	network->LoadOnnxModel(NetworkModelPath);
}

void GNNController::prepareInput()
{
	std::vector<glm::vec2> inTrajPos;
	std::vector<glm::vec2> inTrajDir;
	std::vector<glm::vec2> inTrajVel;
	std::vector<float> inTrajSpeed;

	std::vector<glm::vec3> inJointPos;
	std::vector<glm::quat> inJointRot;
	std::vector<glm::vec3> inJointVel;

	std::vector<float> futurePhase;

	//get current root
	glm::vec2 currentRootPos = ctrlTrajPos[currentPivot];
	glm::quat currentRootRot = ctrlTrajForward[currentPivot];

	glm::mat4 trans = glm::translate(glm::mat4(1.0), glm::vec3(currentRootPos.x, 0.0, currentRootPos.y));
	glm::mat4 root = trans * glm::toMat4(currentRootRot);

	glm::vec3 forward{ 0.0,0.0,1.0 };

	//prepare trajectory
	for (int i = currentPivot - pastKeys; i <= currentPivot + futureKeys; i++) {
		
		int idx = glm::max(i, 0);
		
		//relative position
		glm::vec2 pos = PositionTo(ctrlTrajPos[idx], root);
		inTrajPos.push_back(pos);
		
		//relative character forward direction
		auto fwrd = ctrlTrajForward[idx] * forward;
		glm::vec2 dir = DirectionTo(fwrd, root);
		inTrajDir.push_back(dir);

		//relative velocity
		glm::vec2 prevPos = ctrlTrajPos[glm::max(0, idx - 1)];
		glm::vec2 currPos = ctrlTrajPos[idx];

		glm::vec2 vel = (currPos - prevPos) / (1.f / 60.f);
		vel = DirectionTo(glm::vec3(vel.x,0.0,vel.y), root) / 100.f;
		inTrajVel.push_back(vel);

		//Speed
		inTrajSpeed.push_back(glm::length(vel));
	}
	//prepare character input

	//initJointVel = std::vector<glm::vec3>(initJointPos.size());

	//HOTFIX: Move Char to first root pos
	glm::mat4 hfTranslation = glm::mat4(1.0);
	hfTranslation = glm::translate(hfTranslation, initJointPos[0]);
	initJointPos = GetRelativeJointPos(initJointPos, hfTranslation);

	for (int i = 0; i < initJointPos.size(); i++) {
		initJointPos[i] = initJointPos[i] + glm::vec3(ctrlTrajPos[0].x, 0.0, ctrlTrajPos[0].y);
	}
	//!HOTFIX

	if (genJointPos.size() <= 0) {
		inJointPos = GetRelativeJointPos(initJointPos, root);
		inJointRot = GetRelativeJointRot(initJointRot, root);
		inJointVel = GetRelativeJointVel(initJointVel, root);
	}
	else {
		inJointPos = GetRelativeJointPos(genJointPos.back(), root);
		inJointRot = GetRelativeJointRot(genJointRot.back(), root);
		inJointVel = GetRelativeJointVel(genJointVel.back(), root);
	}

	// Prepare Phase Input
	phase2D = std::vector<glm::vec2>(numPhaseChannel * (totalKeys + 1));

	for (int key = 0; key < totalKeys+1; key++) {
		for (int chnl = 0; chnl < numPhaseChannel; chnl++) {
			int idx = numPhaseChannel * key + chnl;
			phase2D[idx] = Calc2DPhase(Phase[idx], Amplitude[idx]);

			phase2D[idx] = glm::vec2(dummyPhase[idx * 2], dummyPhase[idx * 2 + 1]);
		}
	}

	BuildInputTensor(inTrajPos, inTrajDir, inTrajVel, inTrajSpeed,
		inJointPos, inJointRot, inJointVel);
	
	qDebug() << "Input Tensor:::::";
	qDebug() << input_values.size();

	
	 
	//normalize

	/*for (int i = 0; i < input_values.size(); i++) {

		input_values[i] = (input_values[i] - meanIn[i]) / stdIn[i];

	}*/

	

	//input_values = std::vector<float>(input_values.size(), 0.0f);
	DebugWriteOutputToFile(input_values, false);
	input_values = DummySequence100Styles[90];
	//Inference
	output_values = network->RunInference(input_values);

	/*for (int i = 0; i < outputValues.size(); i++) {

		outputValues[i] = (outputValues[i] * stdOut[i]) + meanOut[i];

	}*/

	auto localRots = readOutput();

	BuildAnimationSequence(localRots);

	DebugWriteOutputToFile(output_values, true);


} 

void GNNController::BuildAnimationSequence(const std::vector<glm::quat>& jointRot){
	
	int numBones = animationIn->mBones.size();
	
	animationOut = std::make_shared<Animation>();

	animationOut->mBones.resize(numBones);

	if (animationIn->mBones.size() != jointRot.size()) {
		qDebug() << "BuildAnimationSequence: Joint Rotations size mismatch";
		return;
	}

	for (int i = 0; i < jointRot.size(); i++) {
		
		animationOut->mBones[i] = Bone(animationIn->mBones[i], 0);
		animationOut->mBones[i].mRotationKeys[0].orientation = jointRot[i];
	} 
}

void GNNController::DebugWriteOutputToFile(const std::vector<float> data, bool out=true) {
	
	QString fileNameData = "";
	if (out)
		fileNameData = "C:\\DEV\\AnimHost\\python\\data\\animhost_test\\test_inf_out.bin";
	else
		fileNameData = "C:\\DEV\\AnimHost\\python\\data\\animhost_test\\test_inf_in.bin";


	FileHandler<QDataStream>::deleteFile(fileNameData);
	FileHandler<QDataStream> fileData = FileHandler<QDataStream>(fileNameData);
	

	QDataStream& outData = fileData.getStream();


	outData.writeRawData((char*)&data[0], data.size() * sizeof(float));

}

void GNNController::BuildInputTensor(const std::vector<glm::vec2>& pos, const std::vector<glm::vec2>& dir, const std::vector<glm::vec2>& vel, const std::vector<float>& speed, 
	const std::vector<glm::vec3>& jointPos, const std::vector<glm::quat>& jointRot, const std::vector<glm::vec3>& jointVel)  {

	input_values.clear();

	for (int i = 0; i < pos.size(); i++) {
		input_values.push_back(pos[i].x);
		input_values.push_back(pos[i].y);

		input_values.push_back(dir[i].x);
		input_values.push_back(dir[i].y);

		input_values.push_back(vel[i].x);
		input_values.push_back(vel[i].y);

		input_values.push_back(speed[i]);
	}

	for (int i = 0; i < jointPos.size(); i++) {
		input_values.push_back(jointPos[i].x);
		input_values.push_back(jointPos[i].y);
		input_values.push_back(jointPos[i].z);

		input_values.push_back(initJointRot[i].x);
		input_values.push_back(initJointRot[i].y);
		input_values.push_back(initJointRot[i].z);
		input_values.push_back(initJointRot[i].w);

		input_values.push_back(jointVel[i].x);
		input_values.push_back(jointVel[i].y);
		input_values.push_back(jointVel[i].z);
	}

	for (auto p : phase2D) {
		input_values.push_back(p.x);
		input_values.push_back(p.y);
	}

	
}

std::vector<glm::quat> GNNController::readOutput()
{
	int f_idx = 0; //feature index
	
	glm::vec2 delta_pos = { output_values[f_idx], output_values[f_idx + 1] };
	float delta_angle = output_values[f_idx + 2];

	f_idx += 3;
	
	
	std::vector<glm::vec2> outTrajPos;
	std::vector<glm::vec2> outTrajDir;
	std::vector<glm::vec2> outTrajVel;


	for (int i = pastKeys; i < totalKeys; i++) {
		
		outTrajPos.push_back({ output_values[f_idx], output_values[f_idx+1] });

		outTrajDir.push_back({ output_values[f_idx + 2], output_values[f_idx + 3] });

		outTrajVel.push_back({ output_values[f_idx + 4], output_values[f_idx + 5] });

		f_idx += 6;
	}

	std::vector<glm::vec3> outJointPos;
	std::vector<glm::quat> outJointRot;
	std::vector<glm::vec3> outJointVel;

	for (int i = 0; i < initJointPos.size(); i++) {

		outJointPos.push_back({ output_values[f_idx], output_values[f_idx + 1], output_values[f_idx + 2] });

		outJointRot.push_back({ output_values[f_idx + 6], output_values[f_idx+3], output_values[f_idx+4],
					  output_values[f_idx+5] });

		outJointVel.push_back({output_values[f_idx +7], output_values[f_idx + 8] , output_values[f_idx + 9] });

		f_idx += 10;
		
	}

	std::vector<glm::vec2> outPhase2D;
	std::vector<float> outAmp;
	std::vector<float> outFreq;

	for (int i = 0; i < futureKeys + 1; i++) {

		for (int j = 0; j < numPhaseChannel; j++) {
			
			outPhase2D.push_back({output_values[f_idx], output_values[f_idx+1]});
			
			f_idx += 2;

		}

		for (int j = 0; j < numPhaseChannel; j++) {
			
			outAmp.push_back({ output_values[f_idx] });
			f_idx++;

		}

		for (int j = 0; j < numPhaseChannel; j++) {

			outFreq.push_back({ output_values[f_idx] });
			f_idx++;

		}

	}

	qDebug() << "Read Out";

	auto localJointRotations = ConvertRotationsToLocalSpace(outJointRot);

	return localJointRotations;

}




std::vector<glm::quat> GNNController::ConvertRotationsToLocalSpace(const std::vector<glm::quat>& rootSpaceJointRots)
{
	//convert global rotations to local space

	std::vector<glm::quat> localRots;

	for (int idx = 0; idx < skeleton->mNumBones; idx++) {
		
		// root space rotation
		glm::quat rsJointRot = rootSpaceJointRots[idx];

		int parentBoneIdx = AnimHostHelper::FindParentBone(skeleton->bone_hierarchy, idx);

		if (parentBoneIdx != -1) {
			// parent bone rotation
			glm::quat parentBoneRot = rootSpaceJointRots[parentBoneIdx];

			// local rotation
			glm::quat localRot = glm::conjugate(parentBoneRot) * rsJointRot;

			// set local rotation
			localRots.push_back(localRot);
		}
		else {
			localRots.push_back(glm::conjugate(rsJointRot) * rsJointRot);
		}
	}

	return localRots;
}

void GNNController::SetAnimationIn(std::shared_ptr<Animation> anim)
{
	animationIn = anim;
}

std::shared_ptr<Animation> GNNController::GetAnimationOut(){
	return animationOut;
}

std::vector<glm::vec3> GNNController::GetRelativeJointVel(const std::vector<glm::vec3>& globalJointVel, const glm::mat4& root)
{
	std::vector<glm::vec3> relativeVel;

	for (int i = 0; i < globalJointVel.size(); i++) {
		relativeVel.push_back(DirectionTo(globalJointVel[i], root));
	}

	return relativeVel;
}

std::vector<glm::vec3> GNNController::GetRelativeJointPos(const std::vector<glm::vec3>& globalJointPos, const glm::mat4& root)
{
	std::vector<glm::vec3> relativePos;


	for (int i = 0; i < globalJointPos.size(); i++) {

		relativePos.push_back(PositionTo(globalJointPos[i], root));
	}

	return relativePos;
}

void GNNController::SetSkeleton(std::shared_ptr<Skeleton> skel)
{
	skeleton = skel;
}

std::vector<glm::quat> GNNController::GetRelativeJointRot(const std::vector<glm::quat>& globalJointRot, const glm::mat4& root) {

	std::vector<glm::quat> relativeRot;

	glm::vec3 scale;
	glm::quat rotation;
	glm::vec3 translation;
	glm::vec3 skew;
	glm::vec4 perspective;

	glm::decompose(root, scale, rotation, translation, skew, perspective);
	rotation = glm::conjugate(rotation);
	glm::quat inv_rotation = glm::inverse(rotation);

	for (int i = 0; i < globalJointRot.size(); i++) {
		relativeRot.push_back(globalJointRot[i] * inv_rotation);
	}

	return relativeRot;
}

glm::vec3 GNNController::PositionTo(const glm::vec3& from, const glm::mat4& to)
{
	glm::vec4 res = glm::inverse(to) * glm::vec4(from, 1.0);
	return glm::vec3(res.x, res.y, res.z);
}

glm::vec2 GNNController::PositionTo(const glm::vec2& from, const glm::mat4& to)
{
	glm::vec4 res = glm::inverse(to) * glm::vec4(from.x, 0.0, from.y, 1.0);
	return glm::vec2(res.x, res.z);
}

glm::vec3 GNNController::DirectionTo(const glm::vec3& from, const glm::mat4& to)
{
	glm::vec4 res = glm::inverse(to) * glm::vec4(from, 0.0);
	return glm::vec3(res.x, res.y, res.z);
}

glm::vec2 GNNController::Direction2DTo(const glm::vec3& from, const glm::mat4& to)
{
	glm::vec4 res = glm::inverse(to) * glm::vec4(from, 0.0);
	return glm::vec2(res.x, res.z);
}

glm::vec2 GNNController::Calc2DPhase(float phaseValue, float amplitude) {
	phaseValue *= (2.f * glm::pi<float>());

	float x_val = glm::sin(phaseValue) * amplitude;
	float y_val = glm::cos(phaseValue) * amplitude;

	return glm::vec2(x_val, y_val);
}


glm::vec2 GNNController::Update2DPhase(float amplitude, float frequency, glm::vec2 current, glm::vec2 next, float minAmplitude=0.f) {

	amplitude = glm::abs(amplitude);
	amplitude = glm::max(amplitude, minAmplitude);

	frequency = glm::abs(frequency);

	glm::vec2 updated = glm::angleAxis(-frequency * 360.f * (1.f / 60.f), glm::vec3(0.f, 0.f, 1.f)) * glm::vec3(current,0.0f);

	next = glm::normalize(next);
	updated = glm::normalize(updated);

	//slerp work around
	glm::quat a = glm::quat(glm::vec3(next, 0.f), glm::vec3(0.f, 0.f, 1.f));
	glm::quat b = glm::quat(glm::vec3(updated, 0.f), glm::vec3(0.f, 0.f, 1.f));
	glm::quat mix = glm::slerp(a,b, 0.5f);

	auto mixed = mix * glm::vec3(0.f, 0.f, 1.f);

	return glm::vec2(mixed);
}

float GNNController::CalcPhaseValue(glm::vec2 phase) {
	
	float angle = -glm::orientedAngle(glm::vec2(0.f, 1.f), glm::normalize(phase));
	if (angle < 0.f) {
		angle = 360.f + angle;
	}

	return glm::mod(angle / 360.f, 1.f);
}

glm::mat4 GNNController::BuildRootTransform(const glm::vec3& pos, const glm::quat& rot)
{
	return glm::mat4();
}


void GNNController::InitDummyData(){
	ctrlTrajPos = {
		{12.419759696043311, 0.0},
		{12.351722952927483, 1.298218395180946},
		{12.148358148375184, 2.582213237954625},
		{11.811893389741906, 3.837916812130414},
		{11.346015055333016, 5.051571366576776},
		{10.755827405671607, 6.209879848021655},
		{10.04779666015207, 7.300151586350707},
		{9.229680151787282, 8.310441336244768},
		{8.31044133624477, 9.22968015178728},
		{7.300151586350707, 10.04779666015207},
		{6.209879848021657, 10.755827405671607},
		{5.051571366576779, 11.346015055333016},
		{3.837916812130415, 11.811893389741906},
		{2.5822132379546274, 12.148358148375182},
		{1.2982183951809487, 12.351722952927483},
		{7.604909478969372e-16, 12.419759696043311},
		{-1.2982183951809447, 12.351722952927485},
		{-2.5822132379546225, 12.148358148375184},
		{-3.8379168121304135, 11.811893389741908},
		{-5.051571366576775, 11.346015055333016},
		{-6.209879848021653, 10.755827405671607},
		{-7.300151586350706, 10.04779666015207},
		{-8.310441336244766, 9.229680151787283},
		{-9.22968015178728, 8.310441336244772},
		{-10.047796660152068, 7.300151586350708},
		{-10.755827405671603, 6.209879848021659},
		{-11.346015055333014, 5.05157136657678},
		{-11.811893389741906, 3.8379168121304157},
		{-12.148358148375182, 2.5822132379546305},
		{-12.351722952927483, 1.2982183951809494},
		{-12.419759696043311, 1.5209818957938745e-15},
		{-12.351722952927485, -1.298218395180941},
		{-12.148358148375184, -2.582213237954622},
		{-11.811893389741908, -3.837916812130413},
		{-11.346015055333018, -5.0515713665767725},
		{-10.755827405671608, -6.209879848021652},
		{-10.04779666015207, -7.300151586350706},
		{-9.229680151787283, -8.310441336244766},
		{-8.310441336244773, -9.229680151787278},
		{-7.300151586350708, -10.047796660152068},
		{-6.209879848021661, -10.755827405671603},
		{-5.051571366576786, -11.346015055333012},
		{-3.837916812130416, -11.811893389741906},
		{-2.582213237954631, -12.148358148375182},
		{-1.2982183951809556, -12.351722952927483},
		{-2.281472843690812e-15, -12.419759696043311},
		{1.2982183951809403, -12.351722952927485},
		{2.5822132379546163, -12.148358148375186},
		{3.837916812130412, -11.811893389741908},
		{5.051571366576772, -11.346015055333018},
		{6.2098798480216475, -10.75582740567161},
		{7.3001515863507045, -10.047796660152072},
		{8.310441336244764, -9.229680151787285},
		{9.229680151787274, -8.310441336244777},
		{10.047796660152068, -7.30015158635071},
		{10.755827405671601, -6.209879848021661},
		{11.346015055333012, -5.051571366576786},
		{11.811893389741906, -3.8379168121304175},
		{12.148358148375182, -2.5822132379546323},
		{12.351722952927485, -1.2982183951809567},
	};

	ctrlTrajForward = {
		{0.9999999843805264, 0.0, 0.0001767454297266162, 0.0},
		{0.9980237298390068, 0.0, -0.06283816259437569, 0.0},
		{0.9921162917583065, 0.0, -0.12532064326257972, 0.0},
		{0.982286628672931, 0.0, -0.18738457548679752, 0.0},
		{0.9685833734783976, 0.0, -0.2486890601156532, 0.0},
		{0.9510564496595229, 0.0, -0.30901719945825573, 0.0},
		{0.9297765055251489, 0.0, -0.3681245030875327, 0.0},
		{0.9048270469824131, 0.0, -0.42577930321832913, 0.0},
		{0.876306681497577, 0.0, -0.4817536714574204, 0.0},
		{0.8443279251378263, 0.0, -0.5358267955528663, 0.0},
		{0.8090169944600089, 0.0, -0.5877852521753961, 0.0},
		{0.7705132427578505, 0.0, -0.637423989770374, 0.0},
		{0.7289686274245416, 0.0, -0.6845471059253555, 0.0},
		{0.6845471059283893, -0.0, -0.7289686274216927, 0.0},
		{0.6374239897486049, -0.0, -0.7705132427758593, 0.0},
		{0.5877852522925443, -0.0, -0.8090169943748957, 0.0},
		{0.5358267949789639, -0.0, -0.8443279255020358, 0.0},
		{0.481753674101728, -0.0, -0.8763066800438566, 0.0},
		{0.4257792915650682, -0.0, -0.9048270524660215, 0.0},
		{0.3681245526846789, -0.0, -0.929776485888251, 0.0},
		{0.30901699437494706, -0.0, -0.9510565162951536, 0.0},
		{0.24868988716485496, -0.0, -0.9685831611286311, 0.0},
		{0.1873813145857243, -0.0, -0.9822872507286887, 0.0},
		{0.12533323356430404, -0.0, -0.9921147013144779, 0.0},
		{0.06279051952931308, -0.0, -0.9980267284282716, 0.0},
		{6.123233995736766e-17, -0.0, 1.0, 0.0},
		{0.06279051952931308, -0.0, 0.9980267284282716, 0.0},
		{0.12533323356430448, -0.0, 0.9921147013144778, 0.0},
		{0.18738131458572474, -0.0, 0.9822872507286886, 0.0},
		{0.24868988716485455, -0.0, 0.9685831611286312, 0.0},
		{0.3090169943749494, -0.0, 0.951056516295153, 0.0},
		{0.36812455268467315, -0.0, 0.9297764858882533, 0.0},
		{0.4257792915650857, -0.0, 0.9048270524660134, 0.0},
		{0.4817536741016813, -0.0, 0.8763066800438822, 0.0},
		{0.5358267949790714, -0.0, 0.8443279255019677, 0.0},
		{0.5877852522923839, -0.0, 0.8090169943750123, 0.0},
		{0.6374239897483734, -0.0, 0.7705132427760508, 0.0},
		{0.6845471059320221, -0.0, 0.7289686274182812, 0.0},
		{0.7289686274021466, 0.0, 0.6845471059492038, 0.0},
		{0.7705132428680344, 0.0, 0.6374239896371845, 0.0},
		{0.8090169939754435, 0.0, 0.5877852528423432, 0.0},
		{0.8443279271188966, 0.0, 0.5358267924311991, 0.0},
		{0.876306673839364, 0.0, 0.4817536853876579, 0.0},
		{0.9048270751783986, 0.0, 0.42577924329880706, 0.0},
		{0.9297764065068237, 0.0, 0.3681247531792147, 0.0},
		{0.9510567801567453, 0.0, 0.30901618229129063, 0.0},
		{0.9685823355466857, 0.0, 0.2486931025720808, 0.0},
		{0.9822896285857262, 0.0, 0.18736884899287842, 0.0},
		{0.9921087171094368, 0.0, 0.12538059433368243, 0.0},
		{0.9980378107769778, 0.0, 0.06261412188554114, 0.0},
	};

	Phase = std::vector<float>(numPhaseChannel * (totalKeys+1), 1.f);
	Amplitude = std::vector<float>(numPhaseChannel * (totalKeys+1), 0.1f);


	dummyIn = { -0.5249618,0.3652196,0.050114945,0.9987435,0.024682527,-0.0368779,0.044375744,-0.4721159,0.29933763,0.039552484,0.99921757,0.031707548,-0.039529156,0.050674677,-0.40563864,0.23342197,0.029805059,0.99955577,0.039886363,-0.039549403,0.056170072,-0.3253349,0.16469434,0.021180019,0.9997757,0.048182234,-0.041236583,0.06341911,-0.23143342,0.09592797,0.01337378,0.99991065,0.056340877,-0.041259814,0.06983314,-0.12269627,0.039731465,0.006319913,0.9999801,0.06524228,-0.0337179,0.07344013,0.0,0.0,8.940697e-08,1.0,0.07361776,-0.02383888,0.077381305,0.1375273,-0.027176056,-0.005564216,0.99998456,0.08251639,-0.016305635,0.084111996,0.29360315,-0.040792674,-0.010379107,0.9999462,0.093645506,-0.0081699705,0.09400122,0.46892047,-0.035759285,-0.0144901695,0.9998951,0.105190374,0.003020029,0.105233714,0.6627863,-0.017166466,-0.017846584,0.99984074,0.11631951,0.011155691,0.11685323,0.87698805,0.0007813573,-0.020312598,0.9997937,0.12852104,0.010768698,0.1289714,0.12910461,-0.035591125,0.00036621094,0.093496464,0.3045007,-0.061553467,0.9459118,-2.2200331e-05,2.530788e-06,-9.628723e-06,-0.45329285,12.832298,-1.3668518,0.003578581,0.31076595,-0.096991204,0.9455181,-3.0836613e-06,-3.6028127e-06,-9.071083e-06,-1.6724396,23.008118,-0.55895996,-0.03644597,0.31261733,-0.11246876,0.94249296,-0.0025533917,0.00011075399,0.00075471995,-3.057495,32.083015,0.848053,-0.07640294,0.313889,-0.12773779,0.93772036,-0.0059147947,0.0002433921,0.0017176751,-4.7408447,40.968422,2.9617004,-0.10628178,0.3144609,-0.13903569,0.9329993,-0.0103507005,0.0003801775,0.002961092,-7.4688416,53.424736,6.7285156,-0.34804773,0.2604817,-0.20679264,0.8764981,-0.017853437,0.0006289495,0.004978505,-10.3146515,59.101234,13.049667,-0.4967764,0.20400451,-0.2353148,0.8100756,-0.01644701,0.0005751248,0.004600319,-10.3146515,59.101234,13.049667,-0.4967764,0.20400451,-0.2353148,0.8100756,-0.01644701,0.0005751248,0.004600319,-9.224045,47.65798,3.895691,-0.13127023,0.28795117,-0.23886749,0.9180384,-0.014895381,-0.00092799164,0.0029188264,-23.269348,43.471672,-1.9860382,0.1478492,0.29163226,-0.69756913,0.6375646,-0.014768544,0.0036464375,0.006686166,-22.897903,13.592201,-10.790375,0.1461924,0.14464276,-0.71137834,0.672047,-0.061553814,-0.008013716,0.074284546,-23.44345,-11.840904,-13.01799,0.055584047,0.0302119,-0.6127838,0.7877143,-0.03441965,-0.0817943,0.38103595,-23.44345,-11.840904,-13.01799,0.055584047,0.0302119,-0.6127838,0.7877143,-0.03441965,-0.0817943,0.38103595,-3.3152466,48.240196,6.249649,-0.22177337,0.33379534,-0.08773682,0.91197574,-0.014194122,0.0019672606,0.005256643,11.196121,46.796013,12.309753,-0.32182357,0.25575602,0.50666165,0.75783414,-0.012966066,0.008701038,0.0037794127,20.078735,17.205536,8.3172455,-0.2951553,0.4792899,0.478033,0.67427677,0.0069677937,0.019547144,-0.021241395,23.06044,-7.3895874,14.50531,-0.35676333,0.5422009,0.32968175,0.68560064,-0.038426638,0.015416099,-0.43419617,23.06044,-7.3895874,14.50531,-0.35676333,0.5422009,0.32968175,0.68560064,-0.038426638,0.015416099,-0.43419617,-10.084747,-0.7055893,-3.2736511,0.093788065,0.34067336,-0.037543237,0.9347385,-2.083442e-05,2.058244e-06,-5.2852506e-06,-10.49205,-44.199303,1.3803864,-0.029644618,0.3070932,-0.07164339,0.9485159,0.031687,-0.006467104,0.051388256,-7.6237946,-86.89494,-4.6470947,0.045759097,0.32357132,-0.04032668,0.94423604,0.012050844,0.0032427176,0.033214267,-14.226334,-96.437584,13.414307,0.045759097,0.32357132,-0.04032668,0.94423604,0.08898066,-0.009495643,0.009319687,-14.226334,-96.437584,13.414307,0.045759097,0.32357132,-0.04032668,0.94423604,0.08898066,-0.009495643,0.009319687,10.321411,0.9135208,3.272461,0.16383849,0.25735775,-0.041340757,0.95142794,-1.0170393e-05,-2.438504e-06,-1.636467e-05,11.263809,-41.557896,13.704117,0.0019372636,0.24303852,-0.097756766,0.9650763,-0.0632962,-0.01206442,-0.28037715,16.368408,-84.297745,9.86702,0.04189016,0.23517151,-0.028839707,0.97062254,-0.19016287,-0.08371982,0.013856202,13.03653,-94.03786,28.70578,0.04189016,0.23517151,-0.028839707,0.97062254,-0.18569425,-0.007847124,0.07751545,13.03653,-94.03786,28.70578,0.04189016,0.23517151,-0.028839707,0.97062254,-0.18569425,-0.007847124,0.07751545,-0.46579292,-0.78616685,-0.16909796,-2.1233103,0.5937081,0.647611,1.24903,-2.9916744,-0.54313123,1.7403276,-0.6365925,-0.6620605,-0.4358837,-2.1070628,0.7115901,0.53905845,0.87582505,-3.1223345,-0.3220514,1.8286908,-0.7800078,-0.509032,-0.69145393,-2.0609167,0.8051946,0.4225367,0.5037407,-3.2005548,-0.056030456,1.8920282,-0.88479185,-0.32865044,-0.9378868,-1.9804652,0.88087004,0.2859074,0.13156423,-3.228958,0.23140678,1.9082749,-0.94189346,-0.11877778,-1.1715592,-1.8670785,0.93377715,0.12049462,-0.23332092,-3.214965,0.5229669,1.8758278,-0.9405904,0.11571294,-1.3847,-1.7306207,0.9521955,-0.07322357,-0.59821904,-3.1592572,0.79528934,1.7973675,-0.8677854,0.35251498,-1.5835589,-1.5703589,0.92433167,-0.2901494,-0.97032815,-3.0499558,1.0141115,1.6901269,-0.7248708,0.5610609,-1.7679161,-1.3852172,0.8366697,-0.51878196,-1.3280591,-2.8865643,1.1849209,1.5666616,-0.5278809,0.7189952,-1.933052,-1.1790262,0.6772067,-0.73704594,-1.657056,-2.681405,1.3276112,1.4291434,-0.31118622,0.8089544,-2.0766277,-0.95199466,0.46629885,-0.9034194,-1.9606686,-2.433053,1.4505528,1.278103,-0.08280067,0.8416452,-2.1967149,-0.70377773,0.23881045,-1.0070195,-2.2366197,-2.134478,1.5616405,1.1047102,0.13152619,0.82792073,-2.2887297,-0.43861833,0.0013227656,-1.0557903,-2.470366,-1.7998703,1.6583652,0.90994847,0.30473104,0.78896296,-2.350462,-0.16240768,-0.25338233,-1.0431032,-2.6532857,-1.4425114,1.7366314,0.6900943 };
	dummyPhase = { -0.46579292,-0.78616685,-0.16909796,-2.1233103,0.5937081,0.647611,1.24903,-2.9916744,-0.54313123,1.7403276,-0.6365925,-0.6620605,-0.4358837,-2.1070628,0.7115901,0.53905845,0.87582505,-3.1223345,-0.3220514,1.8286908,-0.7800078,-0.509032,-0.69145393,-2.0609167,0.8051946,0.4225367,0.5037407,-3.2005548,-0.056030456,1.8920282,-0.88479185,-0.32865044,-0.9378868,-1.9804652,0.88087004,0.2859074,0.13156423,-3.228958,0.23140678,1.9082749,-0.94189346,-0.11877778,-1.1715592,-1.8670785,0.93377715,0.12049462,-0.23332092,-3.214965,0.5229669,1.8758278,-0.9405904,0.11571294,-1.3847,-1.7306207,0.9521955,-0.07322357,-0.59821904,-3.1592572,0.79528934,1.7973675,-0.8677854,0.35251498,-1.5835589,-1.5703589,0.92433167,-0.2901494,-0.97032815,-3.0499558,1.0141115,1.6901269,-0.7248708,0.5610609,-1.7679161,-1.3852172,0.8366697,-0.51878196,-1.3280591,-2.8865643,1.1849209,1.5666616,-0.5278809,0.7189952,-1.933052,-1.1790262,0.6772067,-0.73704594,-1.657056,-2.681405,1.3276112,1.4291434,-0.31118622,0.8089544,-2.0766277,-0.95199466,0.46629885,-0.9034194,-1.9606686,-2.433053,1.4505528,1.278103,-0.08280067,0.8416452,-2.1967149,-0.70377773,0.23881045,-1.0070195,-2.2366197,-2.134478,1.5616405,1.1047102,0.13152619,0.82792073,-2.2887297,-0.43861833,0.0013227656,-1.0557903,-2.470366,-1.7998703,1.6583652,0.90994847,0.30473104,0.78896296,-2.350462,-0.16240768,-0.25338233,-1.0431032,-2.6532857,-1.4425114,1.7366314,0.6900943 };

	meanIn = {
		-0.15854472,-2.0948067,0.005446149,0.9916975,0.017222168,0.20798783,0.8749564,-0.13041481,-1.7474577,0.0045588524,0.99414754,0.016877936,0.20840918,0.8750021,-0.102930814,-1.3993667,0.0036602677,0.9962021,0.016490418,0.20885476,0.87502074,-0.076125935,-1.0505382,0.002752679,0.9978368,0.016082916,0.20929717,0.8750358,-0.05002607,-0.7009993,0.0018384315,0.9990287,0.01565992,0.20972323,0.8750466,-0.024647795,-0.35079715,0.00091998867,0.99975544,0.015226964,0.21012133,0.87505376,0.0,0.0,-7.4314077e-10,1.0,0.014788674,0.21047826,0.8750568,0.02391218,0.351294,-0.0009187669,0.99975526,0.01434731,0.2107764,0.875054,0.047086984,0.7029535,-0.0018335469,0.99902785,0.013904873,0.21099566,0.8750438,0.06952343,1.0548193,-0.0027417478,0.99783415,0.013461875,0.21111955,0.87502646,0.091213875,1.4067135,-0.0036410321,0.9961959,0.013014273,0.21113639,0.8750021,0.112139024,1.7584413,-0.0045293258,0.9941361,0.012555068,0.21103661,0.87497133,0.0014314256,-7.103813e-05,0.0009034709,0.030128531,-0.04652861,-0.0008019643,-0.004077784,-1.369231e-09,-3.240207e-10,-1.1552255e-09,-0.08397574,12.834467,0.024114909,0.030505337,-0.049038667,0.003449639,0.00049207883,-2.0360151e-09,-3.4231035e-10,-9.878828e-10,-0.06413316,23.00987,0.031477418,0.030530462,-0.050264526,0.0054511838,0.0026576777,-9.983589e-06,-4.520121e-05,0.00016050832,-0.014298107,32.141224,0.03366885,0.030472046,-0.051484197,0.007509061,0.0048572877,-2.079392e-05,-0.000113215916,0.0003645466,0.06891114,41.171265,0.031068467,0.030356847,-0.052415535,0.009128698,0.0065471823,-3.178313e-05,-0.0002134859,0.0006213058,0.22308344,53.95651,0.021771284,0.025701152,-0.06032528,0.020760758,0.019382212,-4.632907e-05,-0.00039529352,0.0010383071,0.4509325,61.37398,0.04383673,0.021294603,-0.07515558,0.025080856,0.03359677,-1.41791215e-05,-0.0005939653,0.0016451974,0.4509325,61.37398,0.04383673,0.021294603,-0.07515558,0.025080856,0.03359677,-1.41791215e-05,-0.0005939653,0.0016451974,0.14822924,48.319763,0.16092151,0.020664541,-0.062699705,0.012429834,0.010208671,-2.7335413e-05,-0.00031126928,0.0008579147,0.15596455,45.2265,0.81615716,-0.042230424,-0.089177884,-0.006747134,0.0052412124,0.00024378904,-0.00032577524,0.00082663953,0.77601707,16.038002,0.99075466,-0.03751286,-0.20422494,-0.09097464,0.053352173,0.0016224532,-0.0004368674,0.0009399581,1.8238379,-2.6731849,1.0007141,-0.0035995939,-0.24473493,-0.09642176,0.07295838,0.0015121188,-0.0007985424,0.0020257244,1.8238379,-2.6731849,1.0007141,-0.0035995939,-0.24473493,-0.09642176,0.07295838,0.0015121188,-0.0007985424,0.0020257244,0.1623931,48.35278,-0.1092051,0.030577596,-0.061787665,0.016650999,0.01600694,-5.2534186e-05,-0.00031947723,0.00085208425,0.22483847,45.56219,-0.8080645,0.0671477,-0.058773346,0.07144521,0.052836355,-0.00021211675,-0.00030968894,0.000897551,-0.6872075,16.923162,-0.90171516,0.09557249,-0.16670066,0.0028354283,0.090869695,-0.000108024746,-6.793396e-05,-0.0007018021,-1.5566767,-1.438992,-0.7356743,0.103147775,-0.18488201,-0.057928063,0.04691654,0.0023303477,0.0016705231,-0.00039647854,-1.5566767,-1.438992,-0.7356743,0.103147775,-0.18488201,-0.057928063,0.04691654,0.0023303477,0.0016705231,-0.00039647854,0.019128226,0.19380468,0.4626836,0.032856036,-0.06709864,-0.0051888023,0.00884186,-1.1718931e-09,-2.66211e-10,-1.0487587e-09,0.30477107,-41.370148,0.55424607,0.03092325,-0.06983633,0.009090995,0.01787095,-0.001016548,4.222533e-05,-0.00036405548,0.021851692,-81.06042,0.69213855,0.028710028,-0.08448106,0.0053306227,0.02963849,0.00086750876,-0.00075033,-0.0010813149,0.80399567,-92.832344,0.8928281,0.029671289,-0.08437121,0.0038660937,0.029417738,-0.00077192544,-0.0007865815,-0.0017973405,0.80399567,-92.832344,0.8928281,0.029671289,-0.08437121,0.0038660937,0.029417738,-0.00077192544,-0.0007865815,-0.0017973405,-0.016877376,0.0838076,-0.46043137,0.029203145,-0.07902331,-0.003058181,0.008517359,-7.1786554e-10,-2.241477e-10,-1.0301596e-09,0.32714164,-41.336536,-0.668334,0.026132993,-0.08066123,0.01229563,0.015066974,-0.00062413013,0.00087925646,-0.0008669094,0.09421394,-81.25169,-0.5652946,0.026217138,-0.09400104,0.008773564,0.019655121,-0.0030583618,0.0012572748,-0.0037640492,0.8325247,-92.82772,-0.94447154,0.027295806,-0.09511611,0.007421842,0.019640489,-0.0024005205,0.0013981857,-0.0054946654,0.8325247,-92.82772,-0.94447154,0.027295806,-0.09511611,0.007421842,0.019640489,-0.0024005205,0.0013981857,-0.0054946654,-0.0031148046,0.0096316105,-0.0013733507,0.020540513,0.01167464,0.0012189382,0.0042748535,0.022670904,-0.010613921,-0.01834005,-0.0029932526,0.009684174,-0.0011590106,0.020386277,0.011807614,0.0009520554,0.004368588,0.022538755,-0.010789472,-0.018504756,-0.0028614972,0.00971142,-0.0009725094,0.020210497,0.01189392,0.00066874025,0.004437412,0.022401903,-0.010979804,-0.018648917,-0.0027214147,0.009724925,-0.00081521575,0.020020232,0.011934849,0.00037625374,0.0044816844,0.022266183,-0.011181763,-0.018770928,-0.0025847338,0.00970987,-0.0006879262,0.01982032,0.01193974,8.219612e-05,0.0045042704,0.022135602,-0.011391519,-0.01886874,-0.0024559053,0.009667416,-0.00058876316,0.019614082,0.011899185,-0.00021463328,0.004507013,0.022012629,-0.011604715,-0.018941315,-0.0023374958,0.009600425,-0.00051637087,0.019404914,0.0118097495,-0.00050060166,0.0044928947,0.021899689,-0.011818638,-0.018987553,-0.002233773,0.009510212,-0.0004684502,0.019194325,0.011674104,-0.00076617266,0.0044636657,0.021798247,-0.012028345,-0.019008782,-0.0021489174,0.009398688,-0.0004442462,0.018983925,0.011497894,-0.0010049244,0.004420385,0.02170879,-0.012229201,-0.019006563,-0.002085055,0.00927059,-0.0004436689,0.018776271,0.011286172,-0.0012123329,0.0043657953,0.02163036,-0.012417515,-0.018983426,-0.0020450559,0.009136718,-0.00046480057,0.018572496,0.011043731,-0.0013858763,0.004301557,0.021563232,-0.0125925,-0.018941764,-0.00202212,0.00899568,-0.00050692743,0.018374885,0.0107775675,-0.0015225266,0.0042297533,0.02150772,-0.012752992,-0.018883402,-0.002018458,0.008849483,-0.0005687327,0.018185964,0.010497689,-0.0016202208,0.0041514058,0.02146241,-0.012897681,-0.018809328
	};

	stdIn = {
		4.6640863,9.075331,0.12756379,0.015277108,0.48727262,0.9009473,0.57197446,3.8766224,7.576944,0.10738994,0.0108254105,0.4815203,0.90397465,0.57195324,3.0936437,6.0717688,0.08670718,0.007058941,0.47627917,0.9066745,0.5719594,2.3147428,4.56069,0.065556,0.0040388573,0.47156915,0.90905195,0.57195777,1.5395716,3.044421,0.043990437,0.001826357,0.4674091,0.9111129,0.57194555,0.7679484,1.5238317,0.022092538,0.0004752612,0.46380752,0.9128594,0.5719229,1.0,1.0,8.328557e-08,1.0,0.46077028,0.91430146,0.57188797,0.7638272,1.5257412,0.022097219,0.00047550624,0.45829603,0.9154473,0.5718374,1.5230626,3.0520802,0.04400894,0.0018285349,0.45638174,0.916308,0.57177395,2.2775261,4.5780025,0.06559684,0.0040453863,0.45502833,0.9169007,0.57170224,3.0273254,6.1026855,0.08677763,0.007073409,0.45422718,0.9172289,0.57162625,3.7726884,7.625543,0.10749505,0.010852228,0.45396867,0.9173057,0.5715456,1.0507942,0.436865,1.4020845,0.07279245,0.5715597,0.05469185,0.8136088,1.0383865e-05,5.9850277e-06,1.21613775e-05,1.4218981,0.45340377,1.8790228,0.074169055,0.57132643,0.056324497,0.81337047,1.1045135e-05,6.403366e-06,1.2787191e-05,1.9569916,0.5148847,2.5195558,0.08860892,0.5703539,0.06497744,0.81186694,0.016250482,0.003627929,0.016428318,2.687982,0.66349506,3.4690335,0.10756827,0.5688523,0.076552086,0.80951834,0.037398443,0.00927798,0.037740834,3.6995187,0.93366736,4.8663406,0.12346195,0.5673806,0.086418726,0.8072002,0.06493701,0.018087795,0.065369286,5.5399837,1.4862275,7.4824915,0.24090871,0.54665184,0.16562295,0.7814104,0.11114685,0.03485424,0.11153949,7.9668064,2.2664042,11.037986,0.24583657,0.5413659,0.16652726,0.78159815,0.13640788,0.049816873,0.13479018,7.9668064,2.2664042,11.037986,0.24583657,0.5413659,0.16652726,0.78159815,0.13640788,0.049816873,0.13479018,5.2434216,1.3124266,6.658825,0.1687605,0.5613386,0.13259177,0.7963819,0.091452375,0.031170588,0.09281535,15.680019,2.4504788,12.857758,0.38908246,0.43251812,0.5179314,0.6192614,0.10031063,0.083824135,0.1143604,20.422695,4.5391855,14.364019,0.37375057,0.4650346,0.470785,0.60678273,0.24079289,0.1510888,0.27670863,24.568697,11.070675,18.907263,0.33381635,0.4978864,0.40022805,0.6371576,0.66195977,0.6913018,0.831023,24.568697,11.070675,18.907263,0.33381635,0.4978864,0.40022805,0.6371576,0.66195977,0.6913018,0.831023,5.5107713,1.2171285,6.453393,0.17739858,0.55677414,0.14018603,0.7959886,0.091091804,0.028065762,0.09116084,16.279379,1.9417573,12.274017,0.3769052,0.4384977,0.49974898,0.6325045,0.100500576,0.07288368,0.10953003,22.789595,4.5169425,15.459316,0.37284493,0.46154103,0.4931375,0.5996688,0.25844106,0.14644696,0.30473733,25.897148,10.748137,19.111336,0.35459337,0.46987617,0.45471644,0.6295571,0.7057166,0.6758572,0.8615261,25.897148,10.748137,19.111336,0.35459337,0.46987617,0.45471644,0.6295571,0.7057166,0.6758572,0.8615261,8.77305,0.90613884,6.3395786,0.13174865,0.5621936,0.10442145,0.8062185,1.1123882e-05,6.288574e-06,1.28251295e-05,12.483197,2.4634626,12.818735,0.16789344,0.5571978,0.12553094,0.79959905,0.36045024,0.1798689,0.42885643,14.526304,5.549082,15.7206745,0.1533124,0.55743986,0.116551556,0.8020624,0.747392,0.46007982,0.8927788,19.473145,3.8928962,22.549803,0.13100043,0.5604458,0.10079447,0.8060377,1.0243863,0.47426504,1.2061734,19.473145,3.8928962,22.549803,0.13100043,0.5604458,0.10079447,0.8060377,1.0243863,0.47426504,1.2061734,8.881699,0.9029787,6.2740245,0.13558728,0.5652274,0.107096486,0.80217975,1.1149108e-05,6.2822196e-06,1.2817948e-05,13.565716,2.54896,13.033816,0.1621899,0.56022555,0.12413863,0.79804534,0.3817865,0.19645649,0.46919227,15.696432,5.273161,16.269657,0.14839694,0.5601084,0.114387885,0.80074996,0.76771814,0.42118904,0.9387656,21.040071,3.6842856,23.392536,0.12013681,0.5635465,0.09592782,0.80533475,1.0290426,0.45989162,1.2379335,21.040071,3.6842856,23.392536,0.12013681,0.5635465,0.09592782,0.80533475,1.0290426,0.45989162,1.2379335,1.2154235,1.2219859,1.7689401,1.7400914,1.417604,1.4235619,2.0164838,2.0021267,1.1309743,1.1324424,1.2153912,1.2219073,1.7689748,1.7400622,1.4175838,1.4235082,2.0164871,2.0021763,1.1310153,1.132561,1.2153484,1.221837,1.7690232,1.7400194,1.4175462,1.4234567,2.0164955,2.0022187,1.131064,1.1326679,1.215294,1.2217771,1.7690824,1.7399665,1.4174893,1.423409,2.0165086,2.0022552,1.1311214,1.1327616,1.2152301,1.221726,1.7691503,1.7399062,1.4174129,1.4233645,2.0165248,2.0022867,1.1311868,1.1328421,1.21516,1.2216809,1.7692245,1.7398407,1.4173206,1.4233187,2.0165434,2.0023131,1.1312605,1.1329092,1.2150859,1.22164,1.7693037,1.7397722,1.4172145,1.4232687,2.0165644,2.0023339,1.1313435,1.1329623,1.2150108,1.2216002,1.7693859,1.7397017,1.417099,1.4232106,2.016588,2.0023487,1.1314367,1.1330011,1.2149384,1.2215571,1.7694693,1.7396321,1.4169782,1.4231408,2.0166142,2.0023572,1.1315385,1.1330281,1.2148707,1.2215079,1.7695503,1.7395672,1.4168558,1.4230561,2.016643,2.0023596,1.1316456,1.1330471,1.2148083,1.2214502,1.7696275,1.7395087,1.4167346,1.4229544,2.0166733,2.0023577,1.1317551,1.1330619,1.2147503,1.2213843,1.7696991,1.7394578,1.4166181,1.4228319,2.0167048,2.0023518,1.1318645,1.1330755,1.2146966,1.2213092,1.7697641,1.7394146,1.4165081,1.422687,2.0167377,2.0023403,1.1319721,1.1330905
	};


	meanOut = {
		0.20631757,-1.4804049,-0.001625548,0.0,0.0,-7.39107e-10,1.0,0.01475711,0.2104908,0.023858348,0.3513132,-0.0009192861,0.9997382,0.014315005,0.2107879,0.04697877,0.7029905,-0.0018346196,0.99896127,0.013872261,0.21100633,0.06936054,1.0548733,-0.0027433294,0.9976908,0.013429051,0.21112975,0.09099512,1.4067843,-0.003642978,0.9959536,0.012980754,0.21114655,0.11186086,1.7585299,-0.004531448,0.9937778,0.012519434,0.21104737,0.0,0.0,0.0,0.03020873,-0.042561922,-0.00069136574,-0.0062837466,-1.2899442e-09,-4.3855655e-10,-1.05916e-09,-0.08540717,12.8345375,0.023211442,0.030670304,-0.046638172,0.003387188,-0.0008115488,-2.0131545e-09,-3.1526542e-10,-9.760031e-10,-0.065564595,23.009941,0.03057396,0.030712519,-0.048141066,0.005348339,0.0015187833,-6.0689836e-06,-4.439403e-05,0.00015737128,-0.01572954,32.141296,0.03276538,0.0306718,-0.049546745,0.0073678223,0.0038326778,-1.1426507e-05,-0.00011126474,0.00035504764,0.067479715,41.171337,0.030165,0.030576799,-0.050575048,0.008958957,0.0055794376,-1.4764954e-05,-0.00020993139,0.0006002125,0.22165203,53.95658,0.02086779,0.02599008,-0.058832265,0.020363044,0.018671468,-1.5766203e-05,-0.0003889279,0.0009935828,0.44950104,61.374054,0.042933278,0.021536322,-0.07383697,0.024754712,0.033007193,3.490218e-05,-0.0005841182,0.0015339822,0.44950104,61.374054,0.042933278,0.021536322,-0.07383697,0.024754712,0.033007193,3.490218e-05,-0.0005841182,0.0015339822,0.14679785,48.319836,0.16001804,0.020990446,-0.06156563,0.012340046,0.009658557,1.845628e-05,-0.00030626776,0.0008262019,0.15453313,45.226574,0.8152538,-0.042025067,-0.089078315,-0.0067547164,0.005260874,0.00040494904,-0.00031929242,0.0007812906,0.7745856,16.038073,0.9898512,-0.0370302,-0.20384462,-0.09085221,0.05320029,0.0018542915,-0.00042110373,0.0010178178,1.8224065,-2.6731138,0.99981046,-0.0033306624,-0.24444519,-0.096398465,0.07285081,0.0019657474,-0.00085868227,0.0013859583,1.8224065,-2.6731138,0.99981046,-0.0033306624,-0.24444519,-0.096398465,0.07285081,0.0019657474,-0.00085868227,0.0013859583,0.16096164,48.352848,-0.11010857,0.030603284,-0.061233416,0.016543858,0.01576617,-4.9108578e-05,-0.00031421904,0.00081512413,0.22340697,45.56226,-0.8089681,0.06710422,-0.058676794,0.07146463,0.052907605,-0.00032019606,-0.0003031366,0.0008373384,-0.68863904,16.923233,-0.9026185,0.095246546,-0.16636926,0.0029050044,0.09068666,-0.00038644107,-5.2831172e-05,-0.00088711415,-1.558108,-1.4389211,-0.73657775,0.103064604,-0.18474302,-0.057713583,0.04688723,0.0019547457,0.0017579984,-0.0012978896,-1.558108,-1.4389211,-0.73657775,0.103064604,-0.18474302,-0.057713583,0.04688723,0.0019547457,0.0017579984,-0.0012978896,0.017696774,0.19387572,0.46178013,0.032910775,-0.066784814,-0.0051178457,0.008775058,-1.0824126e-09,-3.0296166e-10,-1.1096174e-09,0.3033397,-41.370075,0.5533427,0.03097591,-0.06993726,0.009070565,0.018053954,-0.0011316427,-4.8489637e-06,-0.0003463898,0.020420285,-81.060356,0.691235,0.02860115,-0.08498163,0.005417143,0.0299945,0.0008462204,-0.00078646943,1.1155909e-05,0.8025644,-92.83227,0.8919247,0.029610965,-0.084843524,0.0039049704,0.029746154,-0.00063314463,-0.0007982298,-0.0014845963,0.8025644,-92.83227,0.8919247,0.029610965,-0.084843524,0.0039049704,0.029746154,-0.00063314463,-0.0007982298,-0.0014845963,-0.018308783,0.08387863,-0.46133488,0.029239448,-0.079306446,-0.0030974795,0.00878133,-5.867061e-10,-2.140646e-10,-9.464657e-10,0.32571018,-41.33646,-0.6692374,0.026111213,-0.080459155,0.012355375,0.015105036,-0.00045641078,0.00088874076,-0.0011985593,0.09278254,-81.25162,-0.5661981,0.026176509,-0.09431494,0.008839705,0.019962432,-0.0031592632,0.0011402044,-0.0030526035,0.83109325,-92.82767,-0.94537497,0.027295068,-0.095440425,0.0074599907,0.019939996,-0.0025849114,0.0012828571,-0.0055714324,0.83109325,-92.82767,-0.94537497,0.027295068,-0.095440425,0.0074599907,0.019939996,-0.0025849114,0.0012828571,-0.0055714324,-0.002233773,0.009510212,-0.0004684502,0.019194325,0.011674104,-0.00076617266,0.0044636657,0.021798247,-0.012028345,-0.019008782,1.4726161,2.3286943,1.7459488,2.6346862,1.4048404,2.0537095,1.0455765,1.6162236,1.0671942,1.5048378,-0.0021489174,0.009398688,-0.0004442462,0.018983925,0.011497894,-0.0010049244,0.004420385,0.02170879,-0.012229201,-0.019006563,1.4724936,2.328704,1.7457752,2.6347115,1.4049196,2.053746,1.0455518,1.6162646,1.0671792,1.504792,-0.002085055,0.00927059,-0.0004436689,0.018776271,0.011286172,-0.0012123329,0.0043657953,0.02163036,-0.012417515,-0.018983426,1.4723701,2.3287153,1.7455903,2.6347342,1.4049971,2.0537822,1.0455298,1.6163054,1.0671643,1.5047497,-0.0020450559,0.009136718,-0.00046480057,0.018572496,0.011043731,-0.0013858763,0.004301557,0.021563232,-0.0125925,-0.018941764,1.4722441,2.3287284,1.7453942,2.6347544,1.4050734,2.0538185,1.0455109,1.6163458,1.0671496,1.5047108,-0.00202212,0.00899568,-0.00050692743,0.018374885,0.0107775675,-0.0015225266,0.0042297533,0.02150772,-0.012752992,-0.018883402,1.4721147,2.3287427,1.7451873,2.6347728,1.4051487,2.0538557,1.0454953,1.6163858,1.0671353,1.5046751,-0.002018458,0.008849483,-0.0005687327,0.018185964,0.010497689,-0.0016202208,0.0041514058,0.02146241,-0.012897681,-0.018809328,1.4719815,2.3287575,1.7449701,2.6347878,1.4052235,2.0538948,1.0454834,1.6164249,1.0671214,1.5046426
	};

	stdOut = {
		0.5802931,1.3539222,0.034520786,1.0,1.0,8.328523e-08,1.07701e-07,0.46077168,0.91429824,0.7638267,1.525737,0.0220966,0.00048416923,0.45829672,0.9154447,1.5230623,3.052071,0.04400443,0.0018532417,0.4563818,0.91630554,2.2775211,4.577992,0.06558273,0.0040922556,0.45502687,0.9168984,3.02732,6.1026707,0.086746894,0.0071450523,0.45422587,0.9172264,3.7726808,7.625521,0.10743967,0.010948039,0.45396814,0.9173034,1.0,1.0,1.0,0.072749354,0.57183164,0.054707773,0.81361985,1.0382422e-05,5.984704e-06,1.21627845e-05,1.0354255,0.13328892,1.4028816,0.07408662,0.57148755,0.056326114,0.813399,1.1045172e-05,6.403316e-06,1.2787192e-05,1.6684648,0.282377,2.1156857,0.088529974,0.5704908,0.06497959,0.811904,0.01624707,0.0036415192,0.016428616,2.453794,0.50716615,3.1091537,0.10749382,0.5689764,0.07655736,0.80955946,0.037390426,0.009307691,0.037741452,3.498903,0.83140177,4.536843,0.123388104,0.56749684,0.086428255,0.80725276,0.064922385,0.018136144,0.065370575,5.3680944,1.425515,7.1828294,0.24087372,0.5467486,0.16564244,0.78147954,0.11112184,0.034931026,0.11154134,7.7829666,2.2266116,10.72192,0.24581675,0.54145575,0.1665376,0.7816985,0.136365,0.049906097,0.13480319,7.7829666,2.2266116,10.72192,0.24581675,0.54145575,0.1665376,0.7816985,0.136365,0.049906097,0.13480319,5.1083584,1.2402467,6.357694,0.16871722,0.5614113,0.13258691,0.79643136,0.09143375,0.031228665,0.09281423,15.674053,2.4031415,12.673697,0.3890772,0.43249494,0.517978,0.6192693,0.10030532,0.08384245,0.114351295,20.471926,4.5068693,14.293959,0.37373003,0.46523735,0.47087824,0.606757,0.24075937,0.15104948,0.27675804,24.59988,11.03774,18.828768,0.33377975,0.498044,0.40027338,0.637155,0.66213655,0.6912577,0.8309194,24.59988,11.03774,18.828768,0.33377975,0.498044,0.40027338,0.637155,0.66213655,0.6912577,0.8309194,5.328711,1.1440417,6.157592,0.17736626,0.5567844,0.140184,0.7960369,0.09106907,0.028126141,0.0911649,16.170906,1.8994167,12.127405,0.37680957,0.43849093,0.499792,0.6325391,0.100462966,0.07289993,0.109553665,22.736498,4.494271,15.46296,0.372824,0.4617184,0.4931852,0.5996766,0.2585083,0.14645423,0.3046781,25.835485,10.720495,19.071087,0.35451633,0.46998504,0.45478785,0.6295456,0.7059083,0.6758665,0.86136335,25.835485,10.720495,19.071087,0.35451633,0.46998504,0.45478785,0.6295456,0.7059083,0.6758665,0.86136335,8.763939,0.7921512,6.148745,0.13177007,0.56217235,0.10442363,0.8062505,1.1122335e-05,6.288583e-06,1.28264455e-05,12.42004,2.4224923,12.604135,0.16789338,0.55711704,0.1255094,0.7996429,0.3604281,0.17985758,0.42888144,14.62481,5.532478,15.811589,0.1533292,0.55728465,0.11655718,0.8021046,0.7471714,0.46021396,0.89288694,19.491371,3.9150536,22.492603,0.1309771,0.5602906,0.10085159,0.806088,1.0242866,0.4741174,1.2063198,19.491371,3.9150536,22.492603,0.1309771,0.5602906,0.10085159,0.806088,1.0242866,0.4741174,1.2063198,8.765544,0.79201186,6.1489873,0.13561948,0.56518394,0.10708738,0.8021687,1.1146623e-05,6.282134e-06,1.2820187e-05,13.463874,2.5275195,12.943376,0.16216919,0.56024164,0.12413247,0.7980618,0.3816903,0.19638371,0.469302,15.748055,5.2604265,16.456966,0.14837901,0.5600335,0.114409365,0.800748,0.7677453,0.42130092,0.938693,21.009043,3.7120035,23.415266,0.12009419,0.5634639,0.09596548,0.8053375,1.029428,0.46000475,1.2375649,21.009043,3.7120035,23.415266,0.12009419,0.5634639,0.09596548,0.8053375,1.029428,0.46000475,1.2375649,1.2150108,1.2216002,1.7693859,1.7397017,1.417099,1.4232106,2.016588,2.0023487,1.1314367,1.1330011,0.894442,0.8571859,0.992702,1.0652976,0.7685988,0.36260182,0.30976263,0.18256728,0.27995417,0.23812416,1.2149384,1.2215571,1.7694693,1.7396321,1.4169782,1.4231408,2.0166142,2.0023572,1.1315385,1.1330281,0.8944851,0.8571857,0.9927328,1.0652988,0.76864654,0.36258745,0.30978048,0.18264435,0.27995852,0.23817201,1.2148707,1.2215079,1.7695503,1.7395672,1.4168558,1.4230561,2.016643,2.0023596,1.1316456,1.1330471,0.8945278,0.8571859,0.99275994,1.0653,0.768693,0.36257344,0.309797,0.18273132,0.2799628,0.23821647,1.2148083,1.2214502,1.7696275,1.7395087,1.4167346,1.4229544,2.0166733,2.0023577,1.1317551,1.1330619,0.89457035,0.85718656,0.99278325,1.0653014,0.7687384,0.36255884,0.30981198,0.18282509,0.27996695,0.23825707,1.2147503,1.2213843,1.7696991,1.7394578,1.4166181,1.4228319,2.0167048,2.0023518,1.1318645,1.1330755,0.8946129,0.857188,0.9928024,1.0653033,0.76878315,0.36254305,0.30982518,0.18292348,0.27997097,0.23829395,1.2146966,1.2213092,1.7697641,1.7394146,1.4165081,1.422687,2.0167377,2.0023403,1.1319721,1.1330905,0.8946552,0.8571906,0.99281687,1.0653058,0.76882744,0.36252528,0.3098364,0.18302451,0.27997485,0.23832761
	};

}
